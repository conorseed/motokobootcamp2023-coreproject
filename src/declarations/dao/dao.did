type Vote = 
 record {
   power: nat;
   timestamp: int;
   vote: bool;
   voter: principal;
 };
type TheDao = 
 service {
   get_all_proposals: () -> (vec record {
                                   nat;
                                   Proposal;
                                 }) query;
   get_config: () -> (Config) query;
   get_proposal: (nat) -> (opt record {
                                 nat;
                                 Proposal;
                               }) query;
   get_token_balance: (principal) -> (nat);
   get_votes_from_principal: (principal) -> (vec record {
                                                   nat;
                                                   Vote;
                                                 }) query;
   get_votes_from_proposal_id: (nat) -> (vec record {
                                               nat;
                                               Vote;
                                             }) query;
   get_voting_power: (principal) -> (nat);
   submit_proposal: (ProposalPayload, text, text) ->
    (variant {
       Err: text;
       Ok: record {
             nat;
             Proposal;
           };
     });
   vote: (nat, bool) ->
    (variant {
       Err: text;
       Ok: record {
             nat;
             Proposal;
             text;
           };
     });
 };
type ProposalStatus = 
 variant {
   executed;
   expired;
   failed: text;
   open;
   passed;
 };
type ProposalPayload = 
 variant {
   update_config: ConfigPayload;
   update_webpage: record {message: text;};
 };
type Proposal = 
 record {
   created: int;
   description: text;
   payload: ProposalPayload;
   proposer: principal;
   status: ProposalStatus;
   title: text;
   updated: int;
   votes_no: nat;
   votes_yes: nat;
 };
type ConfigPayload = 
 record {
   min_to_propose: opt nat;
   min_to_vote: opt nat;
   proposal_length: opt int;
   quadratic_voting: opt bool;
   threshold_fail: opt nat;
   threshold_pass: opt nat;
 };
type Config = 
 record {
   min_to_propose: nat;
   min_to_vote: nat;
   proposal_length: int;
   quadratic_voting: bool;
   threshold_fail: nat;
   threshold_pass: nat;
 };
service : () -> TheDao
